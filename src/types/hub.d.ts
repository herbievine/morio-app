/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface HubInterface extends ethers.utils.Interface {
  functions: {
    "createNote(string)": FunctionFragment;
    "getContent(bytes32)": FunctionFragment;
    "getNote(uint256)": FunctionFragment;
    "getNotes()": FunctionFragment;
    "updateNote(uint256,string)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "createNote", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getContent",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getNotes", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateNote",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "createNote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getContent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateNote", data: BytesLike): Result;

  events: {
    "ContentAdded(bytes32,string)": EventFragment;
    "ContentUpdated(bytes32,string)": EventFragment;
    "NoteCreated(uint256,address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContentAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContentUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NoteCreated"): EventFragment;
}

export type ContentAddedEvent = TypedEvent<
  [string, string] & { contentId: string; contentUri: string }
>;

export type ContentUpdatedEvent = TypedEvent<
  [string, string] & { contentId: string; contentUri: string }
>;

export type NoteCreatedEvent = TypedEvent<
  [BigNumber, string, string] & {
    noteId: BigNumber;
    owner: string;
    contentId: string;
  }
>;

export class Hub extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: HubInterface;

  functions: {
    createNote(
      _contentUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getContent(
      _contentId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNote(
      _noteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, string, string] & {
          noteId: BigNumber;
          owner: string;
          contentId: string;
        }
      ]
    >;

    getNotes(overrides?: CallOverrides): Promise<
      [
        ([BigNumber, string, string] & {
          noteId: BigNumber;
          owner: string;
          contentId: string;
        })[]
      ]
    >;

    updateNote(
      _noteId: BigNumberish,
      _contentUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createNote(
    _contentUri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getContent(_contentId: BytesLike, overrides?: CallOverrides): Promise<string>;

  getNote(
    _noteId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string] & {
      noteId: BigNumber;
      owner: string;
      contentId: string;
    }
  >;

  getNotes(overrides?: CallOverrides): Promise<
    ([BigNumber, string, string] & {
      noteId: BigNumber;
      owner: string;
      contentId: string;
    })[]
  >;

  updateNote(
    _noteId: BigNumberish,
    _contentUri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createNote(_contentUri: string, overrides?: CallOverrides): Promise<void>;

    getContent(
      _contentId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getNote(
      _noteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        noteId: BigNumber;
        owner: string;
        contentId: string;
      }
    >;

    getNotes(overrides?: CallOverrides): Promise<
      ([BigNumber, string, string] & {
        noteId: BigNumber;
        owner: string;
        contentId: string;
      })[]
    >;

    updateNote(
      _noteId: BigNumberish,
      _contentUri: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ContentAdded(bytes32,string)"(
      contentId?: BytesLike | null,
      contentUri?: null
    ): TypedEventFilter<
      [string, string],
      { contentId: string; contentUri: string }
    >;

    ContentAdded(
      contentId?: BytesLike | null,
      contentUri?: null
    ): TypedEventFilter<
      [string, string],
      { contentId: string; contentUri: string }
    >;

    "ContentUpdated(bytes32,string)"(
      contentId?: BytesLike | null,
      contentUri?: null
    ): TypedEventFilter<
      [string, string],
      { contentId: string; contentUri: string }
    >;

    ContentUpdated(
      contentId?: BytesLike | null,
      contentUri?: null
    ): TypedEventFilter<
      [string, string],
      { contentId: string; contentUri: string }
    >;

    "NoteCreated(uint256,address,bytes32)"(
      noteId?: BigNumberish | null,
      owner?: string | null,
      contentId?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { noteId: BigNumber; owner: string; contentId: string }
    >;

    NoteCreated(
      noteId?: BigNumberish | null,
      owner?: string | null,
      contentId?: null
    ): TypedEventFilter<
      [BigNumber, string, string],
      { noteId: BigNumber; owner: string; contentId: string }
    >;
  };

  estimateGas: {
    createNote(
      _contentUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getContent(
      _contentId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNote(
      _noteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNotes(overrides?: CallOverrides): Promise<BigNumber>;

    updateNote(
      _noteId: BigNumberish,
      _contentUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createNote(
      _contentUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getContent(
      _contentId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNote(
      _noteId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNotes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateNote(
      _noteId: BigNumberish,
      _contentUri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
